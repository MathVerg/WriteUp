#!/usr/bin/python3

import json
from pwn import *
from hashlib import sha256
from tqdm import trange


def start():
    global io
    if args.REMOTE:
        io = remote("duality.nc.jctf.pro", 1337)
    else:
        io = process("./polyhash.py")
    io.recvline()

#https://en.wikipedia.org/wiki/HMAC
BLOCK_SIZE = 64
nonce_1 = b"A"*128
nonce_2 = sha256(nonce_1).digest()
P = 22193
if args.REMOTE:
    CHUNK_SIZE = 100
    start()
    for i in trange(0, P, CHUNK_SIZE):
        big_payload = b""
        for j in range(i, min(i+CHUNK_SIZE, P)):

            msg_1 = b"\0"
            b = P - ((j*j) % P)

            msg_2 = p32(P + b, endian="big")
            key_2=j

            attempt = {
                "method":"submit",
                "nonce_1" : nonce_1.hex(),
                "nonce_2": nonce_2.hex(),
                "msg_1": msg_1.hex(),
                "msg_2": msg_2.hex(),
                "guess_key_2":key_2,
            }

            attempt = json.dumps(attempt)
            big_payload += attempt.encode() + b"\n"


        io.send(big_payload)
        for j in range(i, min(i+CHUNK_SIZE, P)):
            print(io.recvline())
        """
        for j in range(i, min(i+CHUNK_SIZE, P)):
            io.recvuntil(b"{")
            resp = b"{" + io.recvline()
            resp = json.loads(resp)
            if resp["message"] != "Invalid":
                print(resp)
                #context.log_level = "DEBUG"
                #io.interactive()
                io.close()
                exit()
        """
    print(io.recvall())
else:
    start()
    io.recvuntil(b"key2=")
    key_2 = int(io.recvline().strip())
    b = P - ((key_2*key_2) % P)
    msg_1 = b"\0"
    msg_2 = p32(P + b, endian="big")
    attempt = {
        "method":"submit",
        "nonce_1" : nonce_1.hex(),
        "nonce_2": nonce_2.hex(),
        "msg_1": msg_1.hex(),
        "msg_2": msg_2.hex(),
        "guess_key_2":key_2,
    }

    attempt = json.dumps(attempt)
    io.sendline(attempt)
    io.interactive()